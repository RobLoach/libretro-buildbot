#!/bin/bash

LOGDATE=`date +%Y-%m-%d`
BUILDBOT=vaporeon_linux
LOGDEST=$BASEDIR/www/log/
BUILDBOT=vaporeon_linux
DEST=$BASEDIR/www/nightly/android/
if [ "${RELEASE}" == "YES" ]; then
   RADEST=$BASEDIR/www/stable/$VERSION/android/
else
   RADEST=$BASEDIR/www/nightly/android/
fi

echo $LOGDATE $BUILDBOT $RELEASE
TMPDIR=$BASEDIR/.tmp/



mkdir -p $TMPDIR/log/$BUILDBOT/${LOGDATE}
echo Buildbot Summary | tee -a  $TMPDIR/log/${BUILDBOT}/${LOGDATE}.log

cd $BASEDIR
cd buildbot
WORKDIR=$PWD

### android ###

# prepare build environment
BOT=$PWD/android
cd $BOT
git pull
git clean -xdf

rm -rf packages

#build cores
RELEASE=$RELEASE TMPDIR=$TMPDIR LOGURL=$LOGURL SIG=$SIG BOT=$BUILDBOT JOBS=6 ./libretro-buildbot-recipe.sh recipes/android/retroarch-android
TMPDIR=$TMPDIR LOGURL=$LOGURL SIG=$SIG BOT=$BUILDBOT JOBS=6 ./libretro-buildbot-recipe.sh recipes/android/cores-android-jni
TMPDIR=$TMPDIR LOGURL=$LOGURL SIG=$SIG BOT=$BUILDBOT JOBS=6 ./libretro-buildbot-recipe.sh recipes/android/cores-android-cross
TMPDIR=$TMPDIR LOGURL=$LOGURL SIG=$SIG BOT=$BUILDBOT JOBS=6 ./libretro-buildbot-recipe.sh recipes/android/cores-android-armv7-ndk
TMPDIR=$TMPDIR LOGURL=$LOGURL SIG=$SIG BOT=$BUILDBOT JOBS=6 ./libretro-buildbot-recipe.sh recipes/android/cores-android-armv7-ndk-mame
TMPDIR=$TMPDIR LOGURL=$LOGURL SIG=$SIG BOT=$BUILDBOT JOBS=6 ./libretro-buildbot-recipe.sh recipes/android/cores-android-armv7-ndk-mame2014

# create packages and cleanup
if [ ! -f $TMPDIR/built-frontend -a ! -f $TMPDIR/built-cores ]; then
    echo "Nothing to do here!"
else
        echo BUILDBOT TASK: packaging cores
        CORE_DIR=$PWD/packages/$(date +%F)_cores
        mkdir $CORE_DIR/armeabi -p
        mkdir $CORE_DIR/armeabi-v7a -p
        mkdir $CORE_DIR/x86 -p
        mkdir -p $DEST
        mkdir -p $RADEST

        cd $CORE_DIR
        mkdir ../latest

        find $BOT/dist/android/armeabi/ -name '*.so' -mmin -2160 -exec cp -v '{}' ./armeabi/ \;
        find $BOT/dist/android/armeabi-v7a/ -name '*.so' -mmin -2160 -exec cp -v '{}' ./armeabi-v7a/ \;
        find $BOT/dist/android/x86/ -name '*.so' -mmin -2160 -exec cp -v '{}' ./x86/ \;

        find . -type f -name '*.so' -exec zip -j '{}'.zip '{}' \;
        find . -type f -name '*.so' -exec rm -v '{}' \;
        cp -v * ../latest/ -rfv

        echo BUILDBOT TASK: packaging retroarch $RELEASE
        cd $BOT
        if [ "${RELEASE}" == "YES" ]; then
           cp -v $BOT/dist/retroarch-release.apk $RADEST/RetroArch.apk
        else
           cp -v $BOT/dist/retroarch-release.apk $RADEST/$(date +%F)-RetroArch.apk
           cp -v $BOT/dist/retroarch-debug.apk $RADEST/$(date +%F)-RetroArch_debug.apk
        fi

        cp -rfv packages/* $DEST
        cp -rfv $TMPDIR/log/* $LOGDEST

fi

## end ###
rm $TMPDIR/built-cores $TMPDIR/built-frontend

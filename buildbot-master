#!/bin/bash

source $BASEDIR/scripts/buildbot.conf

if [ "${RELEASE}" = "YES" ]; then
   export FORCE_RETROARCH_BUILD=YES
else
   export FORCE_RETROARCH_BUILD=NO
fi

echo Enviroment Vars:
echo
echo LOGURL=$LOGURL
echo UPLOAD=$UPLOAD
echo BUILDBOT_OSX=$BUILDBOT_OSX
echo BUILDBOT_WIN=$BUILDBOT_WIN
echo BUILDBOT_LINUX_X86=$BUILDBOT_LINUX_X86
echo BUILDBOT_LINUX_ARMHF=$BUILDBOT_LINUX_ARMHF
echo BASEDIR=$BASEDIR
echo RELEASE=$RELEASE
echo VERSION=$VERSION
echo FORCE_RETROARCH_BUILD=$FORCE_RETROARCH_BUILD

buildbot_log() {

        echo === BUILDBOT MSG: $MESSAGE ===
        MESSAGE=`echo -e $1`

        HASH=`echo -n "$MESSAGE" | openssl sha1 -hmac $SIG | cut -f 2 -d " "`
        curl --max-time 30 --data "message=$MESSAGE&sign=$HASH" $LOGURL
}

mkdir -p $BASEDIR/.tmp
mkdir -p $BASEDIR/.tmp/log

if [ ! -f $BASEDIR/.tmp/buildbot.lock ]; then
   touch $BASEDIR/.tmp/buildbot.lock
   echo "buildbot not running"

else
   echo "buildbot already running"
   exit
fi

if [ "${RELEASE}" = "YES" ]; then
   buildbot_log "release cycle starting"
fi

# iOS, OSX
ssh $BUILDBOT_OSX -Y '/Users/buildbot/scripts/buildbot-script-osx $RELEASE $VERSION'

# Sync files from the VMs and upload
rsync $BUILDBOT_OSX:/Users/buildbot/www/* $BASEDIR/www/ -av
rsync $BASEDIR/www/ $UPLOAD -av

# Update Cydia
if [ "${RELEASE}" = "NO" ]; then
   $BASEDIR/scripts/update-cydia
   rsync $BASEDIR/www/ $UPLOAD -av | grep deb
   if [ $? -eq 0 ]; then
      buildbot_log "retroarch build published [cydia]"
   fi
fi

# Cleanup the local cache
find $BASEDIR/www -type f -exec rm -rv {} \;

# Windows
ssh $BUILDBOT_WIN -Y '$BASEDIR/buildbot-master $RELEASE $VERSION'

# Sync files from the VMs and upload
rsync $BUILDBOT_WIN:$BASEDIR/www/* $BASEDIR/www/ -av
rsync $BASEDIR/www/ $UPLOAD -av

# Linux x86
ssh $BUILDBOT_LINUX_X86 -Y '$BASEDIR/scripts/buildbot-script-linux_x86 $RELEASE $VERSION'

# Sync files from the VMs and upload
rsync $BUILDBOT_LINUX_X86:$BASEDIR/www/* $BASEDIR/www/ -av
rsync $BASEDIR/www/ $UPLOAD -av

# Linux armhf
#ssh $BUILDBOT_LINUX_ARMHF -Y $BASEDIR/scripts/buildbot-script-linux_armhf

# Sync files from the VMs and upload
#rsync $BUILDBOT_LINUX_ARMHF:$BASEDIR/www/* $BASEDIR/www/ -av
#rsync $BASEDIR/www/ $UPLOAD -av

# Cleanup the VM cache
ssh $BUILDBOT_OSX -Y "rm -rfv /Users/buildbot/www/*"
ssh $BUILDBOT_WIN -Y "rm -rfv $BASEDIR/www/*"
ssh $BUILDBOT_LINUX_X86 -Y "rm -rfv $BASEDIR/www/*"
ssh $BUILDBOT_LINUX_ARMHF -Y "rm -rfv $BASEDIR/www/*"

# Cleanup the local cache
rm -rfv $BASEDIR/www/*

rm $BASEDIR/.tmp/buildbot.lock
rm $BASEDIR/.tmp/built*

if [ "${RELEASE}" = "YES" ]; then
   buildbot_log "release cycle finished"
   $BASEDIR/scripts/buildbot-restore
fi
